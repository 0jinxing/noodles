AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Globals:
  Function:
    Runtime: "nodejs12.x"
    Tags:
      Application: "serverless-web-app"
    Environment:
      Variables:
        NOODLES_MD5_TABLE: !Ref "NoodlesMd5Table"
        NOODLES_BUCKET: !Ref "NoodlesBucket"

Resources:
  NoodlesBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "Private"
      BucketName: "noodles-bucket"

  NoodlesMd5Table:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "noodles-md5"
      KeySchema:
        - AttributeName: "md5"
          KeyType: "HASH"
      AttributeDefinitions:
        - AttributeName: "md5"
          AttributeType: "S"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  NoodlesGateway:
    Type: "AWS::Serverless::Api"
    Properties:
      StageName: "prod"

  # S3 Trigger Fn
  CalcHashFn:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: "dist/deploy.zip"
      Handler: "dist/fn/calc-md5.handler"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref "NoodlesMd5Table"
        - DynamoDBWritePolicy:
            TableName: !Ref "NoodlesMd5Table"
        - Statement:
            - Effect: "Allow"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::*"

  # Api Fn
  SendEmailApi:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: "dist/deploy.zip"
      Handler: "dist/api/send-email.handler"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref "NoodlesMd5Table"
      Events:
        ApiEvent:
          Type: "Api"
          Properties:
            Path: "/email"
            Method: "POST"
            RestApiId: !Ref "NoodlesGateway"

  GenTokenApi:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: "dist/deploy.zip"
      Handler: "dist/api/gen-token.handler"
      Events:
        ApiEvent:
          Type: "Api"
          Properties:
            Path: "/token"
            Method: "GET"
            RestApiId: !Ref "NoodlesGateway"
      Environment:
        Variables:
          ASSUME_ROLE_ARN: !GetAtt "STSAssumeRole.Arn"

  QueryMd5Api:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: "dist/deploy.zip"
      Handler: "dist/api/query-md5.handler"
      Events:
        ApiEvent:
          Type: "Api"
          Properties:
            Path: "/md5"
            Method: "GET"
            RestApiId: !Ref "NoodlesGateway"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref "NoodlesMd5Table"

  STSAssumeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "S3PutObjectPolicie"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:PutObject"
                Resource: "arn:aws:s3:::*"

  # Bucket Notification
  NotificationFnRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: "/"
      Policies:
        - PolicyName: "S3BucketNotificationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:PutBucketNotification"
                Resource: "arn:aws:s3:::*"

  NotificationFnPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      SourceAccount: !Ref "AWS::AccountId"
      FunctionName: !Ref "CalcHashFn"
      SourceArn: !GetAtt "NoodlesBucket.Arn"
      Principal: "s3.amazonaws.com"

  NotificationFn:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: "dist/custom/bucket-notification.handler"
      Role: !GetAtt "NotificationFnRole.Arn"

  NotificationCustom:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt "NotificationFn.Arn"
      bucket: !Ref "NoodlesBucket"
      fnArn: !GetAtt "CalcHashFn.Arn"
